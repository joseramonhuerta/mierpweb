/*
 * File: windowFechas.js
 * Date: Tue Dec 01 2015 11:00:09 GMT-0700 (Hora estándar Montañas (México))
 * 
 * This file was generated by Ext Designer version 1.1.2.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

WindowFechasObras = Ext.extend(WindowFechasObrasUi, {
    
	listeners:{
		afterrender:function(){
			
		},
		show: function () {
            if (this.btnAceptar) {
                this.btnAceptar.focus(true,true);
            }
			this.keyControl();
		
        }
	},

	initComponent: function() {
        WindowFechasObras.superclass.initComponent.call(this);
		this.initStores();
		this.initEventos();
		this.initTemplates();
    },
	modoConsulta: false,
	data: null,
	initTemplates: function() {
        /*var columnID = 'Activo';
        var index = 4;
        var me = this;
        var cm = this.grid.getColumnModel();
        var c = cm.getColumnById(columnID);

        c.tpl = new Ext.XTemplate(
            '<tpl>',
	        '<input id="{[this.getID(values, ' + index.toString() + ', values.Activo)]}" type="checkbox" />',
            '</tpl>',
            {
                compiled: true,
                getID: function (values, i, check) {
					check = check.toUpperCase() == 'S'
                    var ID_ActivoFijo = values.ID_ActivoFijo.toString();
                    var id = 'WindowActivosFijos_' + ID_ActivoFijo + '_' + columnID;
                    this.setCheck.defer(1, this, [id, check]);
                    return id;
                },
                setCheck: function (id, check) {
                    if (check) {
                        
                        Ext.get(id).set({ checked: true });
                    }
                }
            }
        );
        c.renderer = function (value, p, r) {
            return c.tpl.apply(r.data);
        };*/
    },
	init:function(d, e){
		this.data = d;
		this.modoConsulta = d.data.modoConsulta == true ? 1 : 0;
		this.e = e;
		this.show();
		this.center();
		this.txtFechaFinalExcepcion.setValue(this.data.data.FechaFinal);
		this.txtFechaInicialExcepcion.setValue(this.data.data.FechaInicial);
		this.gridFechas.store.removeAll();
		this.gridFechas.store.load();
		this.btnAceptar.focus(true,true);
	},
	
	initEventos:function(){
		
		this.on('afterrender', function(){
			this.btnAceptar.focus(true,true);
			//if(this.modoConsulta)
			//this.e.record.reject();
			//this.keyControl();
			
		}, this);
		
		this.btnAceptar.on('click',function(){
			if(!this.modoConsulta){
				var cantidadSeleccionada = this.gridFechas.selModel.getSelections().length;
				if (cantidadSeleccionada != this.data.data.Cantidad){
					SuccessFalse({Severity: 50000, Message: "La cantidad de dias seleccionados no coincide con la cantidad de dias de la excepcion" });
					return false;
				}
				
				var dias = [];
				Ext.each(this.gridFechas.selModel.getSelections(), function(item){
				  dias.push(item.data.Fecha);
				}, this);
				this.scopeForm.fireEvent("generaIncidenciaDiasFaltas", this.data, dias, this.e);
				this.hide();
				
			}else{
				this.scopeForm.gridDetalle.startEditing(this.scopeForm.rowSelected, this.scopeForm.columnSelected);
				this.hide();
			}
		},this);
		
		this.on("hide", function(e){
			this.scopeForm.limpiaDetalle();
		}, this);
		
		this.btnCancelar.on('click',function(){
			if(!this.modoConsulta){
				this.e.record.reject();				
			}
			this.scopeForm.gridDetalle.startEditing(this.scopeForm.rowSelected, this.scopeForm.columnSelected);
			this.hide();
		},this);
		
		this.txtFechaInicialExcepcion.on('change', function(t, newValue, oldValue){
			this.txtFechaFinalExcepcion.minValue = newValue;
		},this);
		
		this.on('hide',function(){
			if(!this.modoConsulta){
				this.e.record.reject();
				
			}
			this.scopeForm.gridDetalle.startEditing(this.scopeForm.rowSelected, this.scopeForm.columnSelected);
		},this);
		
		this.gridFechas.store.on('beforeload',function(store){
			store.baseParams.Config = store.Config;
			store.baseParams.Params = [
				this.txtFechaInicialExcepcion.getValue(), this.txtFechaFinalExcepcion.getValue(),
				this.txtFechaInicialExcepcion.getValue(), this.txtFechaFinalExcepcion.getValue(),
				this.data.data.ID_Empleado, this.data.data.ID_ClienteEmpleado, this.data.data.FechasFaltas, this.data.data.FechasDias,this.data.data.TipoIncidencia, this.data.data.ID_PeriodoObra, this.data.data.DiasUsados,
				this.data.data.Indice, this.data.data.Cantidad, this.modoConsulta
			];
			store.baseParams.limit = 99999;
			this.scopeForm.mascara();
		},this);
		
		var d;

		this.gridFechas.store.on('load',function(store){
			if(store.data.items.length > 0){
				d = store.data.items[0].data;
				//this.txtFechaInicialExcepcion.setValue(d.FechaInicial);
				//this.txtFechaFinalExcepcion.setValue(d.FechaFinal);
			}
			
			var arr = [], arr2 = [], c=0;
			for(var i=0; i<store.data.items.length; i++){
				d = store.data.items[i].data;
				if(d.Activo == 'S' && c < this.data.data.Cantidad){
					arr.push(i);
					c++;
				}
				arr2.push(i);
			}
			this.gridFechas.selModel.selectRows(arr);
			
			this.scopeForm.quitaMascara();
			this.btnAceptar.focus(true,true);
			
		},this);
		
		this.gridFechas.getSelectionModel().on('beforerowselect', function(sm, index, ke, rec){
			// no se pueden seleccionar
			if (rec.data.Activo == 'N' && !rec.data.Seleccionado){
				return false;
			}
		}, this);
	
	},
	
	initStores:function(){
		
		this.gridFechas.store = new Ext.Atica.StoreGenerico({
			idProperty: 'Fecha',
			Config: ['PeriodosObras','GetFechas'],
			Method: 'GetFunctionTable',
			Url: 'NominasWCF.asmx',
            fields:[
						{
							name: 'IsNew', 
							type: 'int'
						},
						{
							name: 'IsDeleted', 
							type: 'int'
						},
						{
							name: 'Indice',
							type: 'int'
						},
						{
							name: 'Fecha',
							type: 'string'
						},
						{
							name: 'Excepcion',
							type: 'int'
						},
						{
							name: 'FechaInicial',
							type: 'string'
						},
						{
							name: 'FechaFinal',
							type: 'string'
						},
						{
							name: 'TipoIncidencia',
							type: 'int'
						},
						{
							name: 'NombreTipoIncidencia',
							type: 'string'
						},
						{
							name: 'Activo',
							type: 'string'
						},
						{
							name: 'ID_ClienteCentroCosto',
							type: 'bigint'
						},
						{
							name: 'NombreCentroCosto',
							type: 'string'
						}
					]
			});
		
		
		
		
		
	},
	keyControl:function(){
		var btnKey2 = new Ext.KeyMap(document,[
			{
				key:Ext.EventObject.ESC,
				//ctrl:true,
				fn:function(key,e){
					this.hide();
				},
				stopEvent:true,
				scope:this
			}/*,
			{
				key:Ext.EventObject.ENTER,
				//ctrl:true,
				fn:function(key,e){
					if(this.modoConsulta)
						this.hide();
					else{
						if (this.btnAceptar)
						this.btnAceptar.fireEvent('click', this);
					}
						
				},
				stopEvent:true,
				scope:this
			}*/
			
			
		]);
		
		
		
		
	}
});
Ext.reg('window_fechasobras', WindowFechasObras);