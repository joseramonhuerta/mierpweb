/*
 * File: formPuntoVentaWinFormaPagos.js
 * Date: Sun Jun 11 2017 21:34:12 GMT-0600 (Hora verano, Montañas (México))
 * 
 * This file was generated by Ext Designer version 1.1.2.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

formPuntoVentaWinFormaPagos = Ext.extend(formPuntoVentaWinFormaPagosUi, {
	finalizada:0,
	totalventa:0.00,
	importe:0.00,
	resta:0.00,
	cambio:0.00,
	tipo_formapago:0,
	renderPrecio:function(val,x,rec){
		return "$"+Ext.util.Format.monedaConSeparadorDeMiles(val);
	},
	inicializarRenders:function(){
		var colModel=this.gridFormasPagos.getColumnModel();
        var columna=colModel.getColumnById('colImporte');
        columna.renderer=this.renderPrecio
	},	
	inicializarStores:function(){
			this.gridFormasPagos.store=new miErpWeb.storePuntoVentaWinFormaPagosGrid();
			
			this.cmbFormaPago.store =  new miErpWeb.storePuntoVentaWinFormaPagosCombo();
			this.cmbFormaPago.store.load();
	},
	inicializarEvents:function(){
		
		this.on('afterrender', function(){
			this.txtImporte.setValue(this.totalventa);
			this.lblTotalVenta.setValue("$"+Ext.util.Format.monedaConSeparadorDeMiles(this.totalventa));// 
			this.txtImporte.focus(true, true);
		}, this);
		
		this.gridFormasPagos.store.on('load',function(){
			this.el.unmask();
		},this);
		
		this.cmbFormaPago.store.on('load',function(){
			var detalles = this.cmbFormaPago.getStore().getRange();
			indexDetalle = detalles.length;
			var id_formapago = 0;
			var tipo_forma = 0;
			for(var x = 0; x<detalles.length; x++){
				if(detalles[x].data.tipo_formapago == 1 ){
					id_formapago = detalles[x].data.id_formapago;
					tipo_forma = detalles[x].data.tipo_formapago;									
				}	
			}			
			
			this.tipo_formapago = tipo_forma;				
			this.cmbFormaPago.setValue(id_formapago);
			this.txtImporte.focus(true, true);
		},this);
		
		this.cmbFormaPago.on('select',function(combo, record, index){
			this.tipo_formapago = record.data.tipo_formapago;	
			this.txtImporte.focus(true, true);
		},this);
		
		this.btnAgregarFormaPago.on('click', function(){
			this.agregarFormaPago();
		}, this);
		
		this.btnCancelarFormaPago.on('click', function(){
			this.close();
		}, this);
		
		this.btnAceptarFormaPago.on('click', function(){
			if(this.importe >= this.totalventa){
				var formaspagos=gridToJson(this.gridFormasPagos);
				var finalizada = 1;
				this.fireEvent("formapagoSeleccionada", finalizada, formaspagos, this.importe,this.cambio);
				this.close();
			}else{
				Ext.Msg.alert('Aviso', 'Los abonos deben ser mayor o igual al total de la venta.');
				return;
			}
			
			
		}, this);
				
		this.gridFormasPagos.getColumnModel().getColumnById("colDelete").renderer = function(v, m, rec){
			value = "<img class='btnEliminarDetalle' src='images/iconos/grid_chico_borrar.png' style='cursor:pointer;' />";
			return value;
		}
		
		this.gridFormasPagos.on("cellclick", function(Grid, rowIndex, columnIndex, e){
			var imgEl = Ext.get(e.getTarget());

			if(imgEl.hasClass("btnEliminarDetalle")){
				var record = this.gridFormasPagos.getStore().getAt(rowIndex);

				Ext.MessageBox.show({
					scope: this,
					title: "Aviso",
					msg: "Est&aacute; seguro de eliminar este detalle?",
					width: 320,
					buttons: Ext.Msg.YESNO,
					fn: function(btn){
						if(btn == "yes"){
							this.gridFormasPagos.getStore().removeAt(rowIndex);
							this.gridFormasPagos.getSelectionModel().selectRow(0);
							this.calcularTotales();						
						}
						
					}
				});				
			}
				
		}, this);		
		
		this.cmbFormaPago.on("keydown", function(cmb, e){
				if(e.getKey()==13){
					this.txtImporte.focus(true, 0);
				}
		}, this);
		
				
		this.txtImporte.on("keydown", function(cmb, e){
				if(e.getKey()==13){
					this.agregarFormaPago();
				}
		}, this);
		
		
	},
	agregarFormaPago: function(){
		
			if(this.cmbFormaPago.getRawValue()==""){
				Ext.Msg.alert('Aviso', 'Seleccione la forma de pago.', function(){
					this.cmbFormaPago.focus(false, true);
				}, this);
				return;
			}
			
			if(this.txtImporte.getValue()=="" || this.txtImporte.getValue() == 0){
				Ext.Msg.alert('Aviso', 'Introduzca el importe.', function(){
					this.txtImporte.focus(false, true);
				}, this);
				return;
			}
			
			if(this.tipo_formapago > 1 && this.txtImporte.getValue() > this.totalventa){
				Ext.Msg.alert('Aviso', 'El importe no puede ser mayor al total de la venta', function(){
					this.txtImporte.focus(false, true);
				}, this);
				return;
			}
			
			
			var detallesFormaPago = this.cmbFormaPago.getStore().getRange();
			indexDetalle = detallesFormaPago.length;
			var id_formapagoDefault = 0;
			var tipo_forma = 0;
			for(var x = 0; x<detallesFormaPago.length; x++){
				if(detallesFormaPago[x].data.id_formapago == this.cmbFormaPago.getValue() ){
					tipo_forma = detallesFormaPago[x].data.tipo_formapago;									
				}
				
				if(detallesFormaPago[x].data.tipo_formapago == 1 ){
					id_formapagoDefault = detallesFormaPago[x].data.id_formapago;
					tipo_forma = detallesFormaPago[x].data.tipo_formapago;
				}	
			}
			
			var existe = false;
			var indexDetalle = 0;
			var id_formapago = this.cmbFormaPago.getValue();
			var detalles = this.gridFormasPagos.getStore().getRange();
			indexDetalle = detalles.length;
			
			for(var x = 0; x<detalles.length; x++){
				if(detalles[x].data.id_formapago == id_formapago ){
					existe = true;
					indexDetalle = x;
									
				}					
				
			}
			
			if(existe == false){
				var record = new this.gridFormasPagos.store.recordType({
				id_formapago: this.cmbFormaPago.getValue(),
				nombre_formapago: this.cmbFormaPago.getRawValue(), 
				tipo_formapago: tipo_forma,
				importe: this.txtImporte.getValue()
				}, Ext.id());
				this.gridFormasPagos.getStore().insert(0,record);
		
			}else{				
				var record = this.gridFormasPagos.getStore().getAt(indexDetalle);
				var imp = this.txtImporte.getValue();
					
				record.set("importe",imp);
											
				this.gridFormasPagos.getStore().commitChanges();				
			}
								
			this.cmbFormaPago.setValue(id_formapagoDefault);
			this.tipo_formapago = 1;
			
			this.calcularTotales();
						
			this.txtImporte.setValue(this.resta);
			
			this.txtImporte.focus(true, true);
		
		
	},
	calcularTotales:function(){
			var i=0;
			var numrecs=this.gridFormasPagos.store.data.length;
			var importe=0,total=0,cambio = 0,resta = 0,importeEfectivo=0,importeOtros=0;	
			total = this.totalventa;
			
			
			for (i=0; i<numrecs; i++){
				rec=this.gridFormasPagos.store.getAt(i);		
				
				if(rec.data.tipo_formapago == 1)
					importeEfectivo+=	parseFloat( rec.data.importe );
				else
					importeOtros+=	parseFloat( rec.data.importe );
						
			}
			importe = importeEfectivo + importeOtros;
			//cambio = importe - total
			resta = importe;
			
			resta = total - importeOtros;
			
			if(resta > 0){
				resta = resta - importeEfectivo;
				if(resta < 0){
					cambio = importeEfectivo - (total - importeOtros);
				}else{
					cambio = 0;
				}					
			}else{
				if(importeEfectivo > 0){
					cambio = importeEfectivo - (total - importeOtros);
				}else{
					cambio = 0;
				}
				
			}
			
			//resta = total - importe;
			if(cambio<0){
				cambio = 0;				
			}
			
			if(resta<0){
				resta = 0;
				
			}		
			
			this.lblAbonos.setValue("$"+Ext.util.Format.monedaConSeparadorDeMiles(importe));
			this.lblCambio.setValue("$"+Ext.util.Format.monedaConSeparadorDeMiles(cambio));
			
			this.importe = importe;
			this.cambio = cambio;
			this.resta = resta;
			
		
	},
	initComponent: function() {
        formPuntoVentaWinFormaPagos.superclass.initComponent.call(this);
		
		
		this.inicializarStores();
		this.inicializarEvents();
		this.inicializarRenders();
		
		this.txtImporte.focus(true, true);
    }
});
Ext.reg('formPuntoVentaWinFormaPagos', formPuntoVentaWinFormaPagos);