/*
 * File: formCortes.js
 * Date: Wed Nov 08 2017 11:00:41 GMT-0700 (Hora estándar Montañas (México))
 * 
 * This file was generated by Ext Designer version 1.1.2.
 * http://www.sencha.com/products/designer/
 *
 * This file will be generated the first time you export.
 *
 * You should implement event handling and custom methods in this
 * class.
 */
Ext.ns('miErpWeb');
Ext.ns('mew');
formCortes = Ext.extend(formCortesUi, {
	total:0.00,
	totalCorte:0.00,
	totalRetencion:0.00,
	renderPrecio:function(val,x,rec){
		return "$"+Ext.util.Format.monedaConSeparadorDeMiles(val);
	},
	inicializarRenders:function(){
		var colModel=this.gridDetalles.getColumnModel();
		var columna=colModel.getColumnById('colTotal');
        columna.renderer=this.renderPrecio
		
		var colModel=this.gridDetallesRetencion.getColumnModel();
		var columna=colModel.getColumnById('colTotalRetencion');
        columna.renderer=this.renderPrecio
	},	
	inicializarStores:function(){
			this.gridDetalles.store=new miErpWeb.storeFormCortesGrid();
			this.cmbDenominacion.store =  new miErpWeb.storeFormCortesDenominaciones();
			this.cmbFormaPago.store =  new miErpWeb.storeFormCortesFormasPagos();
			
			this.gridDetallesRetencion.store=new miErpWeb.storeFormCortesGridRetencion();
			this.cmbDenominacionRetencion.store =  new miErpWeb.storeFormCortesDenominacionesRetencion();
			this.cmbFormaPagoRetencion.store =  new miErpWeb.storeFormCortesFormasPagosRetencion();
	},
	inicializarEvents:function(){
		this.frmMain.on('actioncomplete',function(form,action){
			 if (action.result.success){
				 this.cargarDatos(action.result.data);				 
			 }else{				
				return false;
			}			
		}, this);	
		
		this.btnAgregar.on('click', function(){
			this.agregarDetalle();
		}, this);

		this.btnAgregarRetencion.on('click', function(){
			this.agregarDetalleRetencion();
		}, this);	
			
		this.gridDetalles.getColumnModel().getColumnById("colDelete").renderer = function(v, m, rec){
			value = "<img class='btnEliminarDetalle' src='images/iconos/grid_chico_borrar.png' style='cursor:pointer;' />";
			return value;
		}
		
		this.gridDetallesRetencion.getColumnModel().getColumnById("colDeleteRetencion").renderer = function(v, m, rec){
			value = "<img class='btnEliminarDetalleRetencion' src='images/iconos/grid_chico_borrar.png' style='cursor:pointer;' />";
			return value;
		}
		
		this.gridDetalles.on("cellclick", function(Grid, rowIndex, columnIndex, e){
			var imgEl = Ext.get(e.getTarget());

			if(imgEl.hasClass("btnEliminarDetalle")){
				var record = this.gridDetalles.getStore().getAt(rowIndex);

				Ext.MessageBox.show({
					scope: this,
					title: "Aviso",
					msg: "Est&aacute; seguro de eliminar este detalle?",
					width: 320,
					buttons: Ext.Msg.YESNO,
					fn: function(btn){
						if(btn == "yes"){
							this.gridDetalles.getStore().removeAt(rowIndex);
							this.gridDetalles.getSelectionModel().selectRow(0);
							// this.gridDetalles.getStore().reload();
							this.calcularTotales();	
							this.calcularTotalesCorte();								
						}
						
					}
				});				
			}
				
		}, this);	
		
		this.gridDetallesRetencion.on("cellclick", function(Grid, rowIndex, columnIndex, e){
			var imgEl = Ext.get(e.getTarget());

			if(imgEl.hasClass("btnEliminarDetalleRetencion")){
				var record = this.gridDetallesRetencion.getStore().getAt(rowIndex);

				Ext.MessageBox.show({
					scope: this,
					title: "Aviso",
					msg: "Est&aacute; seguro de eliminar este detalle?",
					width: 320,
					buttons: Ext.Msg.YESNO,
					fn: function(btn){
						if(btn == "yes"){
							this.gridDetallesRetencion.getStore().removeAt(rowIndex);
							this.gridDetallesRetencion.getSelectionModel().selectRow(0);
							// this.gridDetalles.getStore().reload();
							this.calcularTotalesRetencion();
							this.calcularTotalesCorte();								
						}
						
					}
				});				
			}
				
		}, this);	
		
		this.btnGuardar.on('click', function(){
			this.guardar();
		}, this );
		
		this.btnEliminar.on('click',function(){	
			this.eliminar();
			
		},this);
	
		this.btnImprimir.on('click', function(){
			this.imprimir();
		}, this);
		
	},
    initComponent: function() {
        formCortes.superclass.initComponent.call(this);
		
		this.txtStatus.setValue=function(value){        	
        	Ext.form.TextField.prototype.setValue.apply(this,arguments);
        	this.fireEvent('cambioDeStatus',{status:value});
		};
		
		 this.txtIdCorte.setValue=function(value){
			Ext.form.TextField.prototype.setValue.apply(this,arguments);
        	this.fireEvent('cambioDeId',{id:value});
			
        };
		
		this.inicializarStores();
		this.inicializarEvents();
		this.inicializarRenders();
    },
	cargarDatos:function(data){
		if (data.Corte==undefined ){
			Ext.Msg.show({
				   title:'Error ',
				   msg: 'Error en los datos del corte',
				   buttons: Ext.Msg.OK,				   				   
				   icon: Ext.MessageBox.WARNING
				});
			return;
		}
		var corte=data.Corte;
		
		var form=this.frmMain.getForm();		
        this.txtIdCorte.setValue(corte.id_corte);
		// this.txtStatus.setValue(corte.status);
		var fechaCor=corte.fecha_corte;
		var dt = Date.parseDate(fechaCor, "d/m/Y H:i:s");
	    this.txtFecha.setValue(dt);
        this.txtHora.setValue(dt.format('H:i:s A'));
		this.txtConcepto.setValue(corte.concepto);		
	
		var total = corte.total;
		this.lblTotal.setValue("$"+Ext.util.Format.monedaConSeparadorDeMiles(0.00));
		this.lblTotalCorte.setValue("$"+Ext.util.Format.monedaConSeparadorDeMiles(total));		
		this.lblTotalRetencion.setValue("$"+Ext.util.Format.monedaConSeparadorDeMiles(0.00));
		
		if (corte.id_corte>0){				
			this.btnEliminar.setDisabled(false);
			this.btnImprimir.setDisabled(false);
			this.setTitle(corte.id_corte+"-"+corte.concepto);
		}
		
		var detallesliquidacion=data.DetallesLiquidacion;
        if(detallesliquidacion!=undefined){			
            this.gridDetalles.store.loadData({
                data:detallesliquidacion
            });
            this.calcularTotales();
        }	
		
		var detallesretencion=data.DetallesRetencion;
        if(detallesretencion!=undefined){			
            this.gridDetallesRetencion.store.loadData({
                data:detallesretencion
            });
            this.calcularTotalesRetencion();
        }	
		
		this.calcularTotalesCorte();
		
		this.el.unmask();	
	},
	agregarDetalle: function(){		
			if(this.cmbFormaPago.getRawValue()==""){
				Ext.Msg.alert('Aviso', 'Seleccione la forma de pago.', function(){
					// this.btnAgregar.enable();
					this.cmbFormaPago.focus(false, true);
				}, this);
				return;
			}
			
			if(this.cmbDenominacion.getRawValue()==""){
				Ext.Msg.alert('Aviso', 'Seleccione la denominacion.', function(){
					// this.btnAgregar.enable();
					this.cmbDenominacion.focus(false, true);
				}, this);
				return;
			}
			
			if(this.txtCantidad.getValue()=="" || this.txtCantidad.getValue() == 0){
				Ext.Msg.alert('Aviso', 'Introduzca la cantidad.', function(){
					// this.btnAgregar.enable();
					this.txtCantidad.focus(false, true);
				}, this);
				return;
			}
			var existe = false;
			var denominacion = this.cmbDenominacion.getRawValue();
			var formapago = this.cmbFormaPago.getValue();
			var cantidad = 0;
			var total = 0;
			
			var detalles = this.gridDetalles.getStore().getRange();
			indexDetalle = detalles.length;
			
			for(var x = 0; x<detalles.length; x++){
				if(detalles[x].data.id_formapago == formapago && detalles[x].data.denominacion == denominacion ){
					existe = true;
					indexDetalle = x;
					cantidad = detalles[x].data.cantidad;				
					total = detalles[x].data.total;					
				}	
			}			
			
			if(existe == false){			
				var record = new this.gridDetalles.store.recordType({
					id_formapago: this.cmbFormaPago.getValue(),
					nombre_formapago: this.cmbFormaPago.getRawValue(), 
					id_denominacion: this.cmbDenominacion.getValue(),
					denominacion: this.cmbDenominacion.getRawValue(), 
					cantidad: this.txtCantidad.getValue(),
					total: 	 this.cmbDenominacion.getRawValue() * this.txtCantidad.getValue()	
				}, Ext.id());			
				this.gridDetalles.getStore().insert(0,record);
			}else{
				var record = this.gridDetalles.getStore().getAt(indexDetalle);
				
				var can = cantidad + this.txtCantidad.getValue();
				var tot = total + (this.cmbDenominacion.getRawValue() * this.txtCantidad.getValue());
								
				record.set("cantidad",can);			
				record.set("total",tot);
				
			
											
				this.gridDetalles.getStore().commitChanges();	
				
			}
			this.calcularTotales();
			this.calcularTotalesCorte();
			this.frmDetalles.getForm().reset();
			this.cmbFormaPago.focus(true, 0);
			this.txtCantidad.setValue(0);		
	},
	agregarDetalleRetencion: function(){		
			if(this.cmbFormaPagoRetencion.getRawValue()==""){
				Ext.Msg.alert('Aviso', 'Seleccione la forma de pago.', function(){
					// this.btnAgregar.enable();
					this.cmbFormaPagoRetencion.focus(false, true);
				}, this);
				return;
			}
			
			if(this.cmbDenominacionRetencion.getRawValue()==""){
				Ext.Msg.alert('Aviso', 'Seleccione la denominacion.', function(){
					// this.btnAgregar.enable();
					this.cmbDenominacionRetencion.focus(false, true);
				}, this);
				return;
			}
			
			if(this.txtCantidadRetencion.getValue()=="" || this.txtCantidadRetencion.getValue() == 0){
				Ext.Msg.alert('Aviso', 'Introduzca la cantidad.', function(){
					// this.btnAgregar.enable();
					this.txtCantidadRetencion.focus(false, true);
				}, this);
				return;
			}
			var existe = false;
			var denominacion = this.cmbDenominacionRetencion.getRawValue();
			var formapago = this.cmbFormaPagoRetencion.getValue();
			var cantidad = 0;
			var total = 0;
			
			var detalles = this.gridDetallesRetencion.getStore().getRange();
			indexDetalle = detalles.length;
			
			for(var x = 0; x<detalles.length; x++){
				if(detalles[x].data.id_formapago == formapago && detalles[x].data.denominacion == denominacion ){
					existe = true;
					indexDetalle = x;
					cantidad = detalles[x].data.cantidad;				
					total = detalles[x].data.total;					
				}	
			}			
			
			if(existe == false){			
				var record = new this.gridDetallesRetencion.store.recordType({
					id_formapago: this.cmbFormaPagoRetencion.getValue(),
					nombre_formapago: this.cmbFormaPagoRetencion.getRawValue(), 
					id_denominacion: this.cmbDenominacionRetencion.getValue(),
					denominacion: this.cmbDenominacionRetencion.getRawValue(), 
					cantidad: this.txtCantidadRetencion.getValue(),
					total: 	 this.cmbDenominacionRetencion.getRawValue() * this.txtCantidadRetencion.getValue()	
				}, Ext.id());			
				this.gridDetallesRetencion.getStore().insert(0,record);
			}else{
				var record = this.gridDetallesRetencion.getStore().getAt(indexDetalle);
				
				var can = cantidad + this.txtCantidadRetencion.getValue();
				var tot = total + (this.cmbDenominacionRetencion.getRawValue() * this.txtCantidadRetencion.getValue());
								
				record.set("cantidad",can);			
				record.set("total",tot);
				
			
											
				this.gridDetallesRetencion.getStore().commitChanges();	
				
			}
			this.calcularTotalesRetencion();
			this.calcularTotalesCorte();
			this.frmDetallesRetencion.getForm().reset();
			this.cmbFormaPagoRetencion.focus(true, 0);
			this.txtCantidadRetencion.setValue(0);		
	},
	calcularTotales:function(){
		var i=0;
		var numrecs=this.gridDetalles.store.data.length;		
		var total=0;						
		for (i=0; i<numrecs; i++){
			rec=this.gridDetalles.store.getAt(i);		
			total+=	parseFloat( rec.data.total );					
		}
		this.lblTotal.setValue("$"+Ext.util.Format.monedaConSeparadorDeMiles(total));
		this.total = total;		

		this.txtTotal.setValue(total);	
	},
	calcularTotalesCorte:function(){
		var i=0;
		var numrecs=this.gridDetalles.store.data.length;		
		var total=0;
		var totalliquidacion=0;
		var totalretencion=0;		
		for (i=0; i<numrecs; i++){
			rec=this.gridDetalles.store.getAt(i);		
			totalliquidacion+=	parseFloat( rec.data.total );					
		}
		var i=0;
		var numrecs=this.gridDetallesRetencion.store.data.length;
		for (i=0; i<numrecs; i++){
			rec=this.gridDetallesRetencion.store.getAt(i);		
			totalretencion+=	parseFloat( rec.data.total );					
		}
		
		total = totalliquidacion + totalretencion ;
		
		
		this.lblTotalCorte.setValue("$"+Ext.util.Format.monedaConSeparadorDeMiles(total));
		this.totalCorte = total;	
		this.txtTotalCorte.setValue(total);	
	},
	calcularTotalesRetencion:function(){
		var i=0;
		var numrecs=this.gridDetallesRetencion.store.data.length;		
		var total=0;						
		for (i=0; i<numrecs; i++){
			rec=this.gridDetallesRetencion.store.getAt(i);		
			total+=	parseFloat( rec.data.total );					
		}
		this.lblTotalRetencion.setValue("$"+Ext.util.Format.monedaConSeparadorDeMiles(total));
		this.totalRetencion = total;		

		this.txtTotalRetencion.setValue(total);	
	},
	renderMoneda:function(val){
		if (val<0){
			return "-$" + Ext.util.Format.monedaConSeparadorDeMiles(val*-1);
		}else{
			return "$" + Ext.util.Format.monedaConSeparadorDeMiles(val);
		}
		
	},
	guardar:function(){
		if (this.frmMain.getForm().isValid()){
			var detallesLiquidacion=gridToJson(this.gridDetalles);
			var detallesRetencion=gridToJson(this.gridDetallesRetencion);
			var fecha = this.txtFecha.getValue();
			fecha=fecha.format('Y-m-d');   
;   
			var params={};
			params['Corte[id_corte]'] = this.txtIdCorte.getValue();
			params['Corte[id_empresa]'] = miErpWeb.Empresa[0].id_empresa;
			params['Corte[id_sucursal]'] = miErpWeb.Sucursal[0].id_sucursal;
			params['Corte[fecha]'] = fecha; 
			params['Corte[hora]'] =this.txtHora.getValue();
			params['Corte[concepto]'] = this.txtConcepto.getValue();
			params['Corte[total_liquidado]'] = this.txtTotal.getValue();
			params['Corte[total_retenido]'] = this.txtTotalRetencion.getValue();
			params['Corte[total_corte]'] = this.txtTotalCorte.getValue();
			params['Corte[status]'] = this.txtStatus.getValue();
			params['DetallesLiquidacion']=detallesLiquidacion;
			params['DetallesRetencion']=detallesRetencion;
			
			
			this.el.mask('Guardando...');
			this.frmMain.getForm().submit({
				params:params,
				scope:this,
				url:'app.php/cortes/save',
				success:function(data, options){
					this.el.unmask();
					
					
				},
				failure:function(form, action){
					
					this.el.unmask();
					}
				});
				
			
		}else{
			return;
			
		}	
	},
	limpiar: function(){
		Ext.MessageBox.show({
			scope: this,
			title: "Aviso",
			msg: "Est&aacute; seguro que desea borrar la captura?",
			width: 320,
			buttons: Ext.Msg.YESNO,
			fn: function(btn){
				if(btn == "yes"){
					this.setConfiguracionInicial();							
				}else{
					this.cmbProducto.focus(false, true);	
				}						
			}
		});
				
		
	},
	obtenerCorte: function(Id){
		Ext.Ajax.request({
			scope: this,
			url: 'app.php/cortes/obtenercorte',
			params: {
				idTur: Id					
			},
			success: function(data, options){
				var respuesta = Ext.decode(data.responseText);					
				if(respuesta.success==true){
					this.cargarDatos(respuesta.data);						
				}else {
					Ext.Msg.alert('Aviso', 'El corte no existe, verifique por favor.', function(){}, this);
				}					
			}
		});
	},
	getParamsImprimir:function(){
		return {
			IDCor:this.txtIdCorte.getValue()
		};
	},
	imprimir:function(){
		var params=this.getParamsImprimir();				
			Ext.Ajax.request({
			params: params,
			   url: 'app.php/cortes/generarreportecorte',
			   success: function(response, opts){
					//Solicita el PDF
					var obj = Ext.decode(response.responseText);
					if (!obj.success){	//Prosegir solo en caso de exito
						return;
					}
					var identificador=obj.data.identificador;
					window.open("app.php/cortes/getpdfcorte?identificador="+identificador,'rep_cor',"height=600,width=800");							
				},
			   failure: function(){
					alert("El servidor ha respondido con un mensaje de error");
				}						   
			   
			});
	},
	eliminar:function(btn){
		switch(btn){	//ESTE SWITCH ES USADO PARA ANALIZAR LO QUE TRATA DE HACER EL USUARIO, LA PRIERA VEZ DEBE ENTRAR A default:
    	case 'no':
    		return;
    	break;
    	case 'yes':
    		this.eliminar('borrar');
    		return;
    		break;
    	case 'borrar':
    		break;		//SALE DEL SWITCH Y SIGUE EJECUTANDOSE LA FUNCI�N
    	case undefined:	//AQUI ENTRA LA PRIMERA VEZ
    	case false:    		
    	default:
    		var me=this;    		
    		Ext.Msg.show({
 			   title:'Confirme por favor',
 			   msg: "¿Desea borrar el corte?",
 			   buttons: Ext.Msg.YESNO,
 			   fn: function(btn){	    				
    				me.eliminar(btn);
    			},
 			   scope:this,
 			   icon: Ext.MessageBox.QUESTION
 			});
    		return;
		} 
		this.el.mask(mew.mensajeDeEspera);
		Ext.Ajax.request({
			params: { id_corte: this.txtIdCorte.getValue() },
			scope:this,
		   	url: 'app.php/cortes/eliminar',
		   	success: function(response,options){	
				var respuesta=Ext.decode(response.responseText);
				if (respuesta.success==false){
					this.el.unmask();
					return;
				}
				
				this.fireEvent('eliminado',options.params.id_corte);
				MainContainer.tabContainer.remove(this);
		   	},
		   	failure: function(){
		   		this.el.unmask();
		   	}		   
		});
	},
	listeners:{
    	activate:function(){
			
    		if (this.activado==true){
    			return;
    		}
    		this.activado=true;
    	
			if (this.idValue!=undefined && this.idValue!=0){
    			this.txtIdCorte.setValue(this.idValue);
				//this.el.mask(mfw.mensajeDeEspera);    			
    		}
                          
			this.frmMain.load({
				params:{idCor:this.idValue,
						id_empresa:miErpWeb.Empresa[0].id_empresa,
						id_sucursal:miErpWeb.Sucursal[0].id_sucursal				
				},
				url:'app.php/cortes/obtenercorte'
			});
			
			return false;
					
    	},
    	cambioDeNombre:function(nombre){
    		this.setTitle(Ext.util.Format.ellipsis(this.idValue+'-'+nombre,25,true));
		},
    	cambioDeId:function(params){
    		var id=params.id;
    		this.idValue=id;
    		if (id==0){
				this.setIconClass(Ext.ux.TDGi.iconMgr.getIcon(this.iconMaster+"_add"));
			}else if (id>0){
				this.setIconClass(Ext.ux.TDGi.iconMgr.getIcon(this.iconMaster+"_edit"));				
			}
					
    	}
    }
});
Ext.reg('formCortes', formCortes);